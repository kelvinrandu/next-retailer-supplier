// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  isSupplier    Boolean   @default(false)
  items         Item[]
  to            Order[]   @relation("to")
  from          Order[]   @relation("from")
  emailVerified DateTime? @map(name: "email_verified")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")


  @@map(name: "users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model Item {
  id               Int     @id @default(autoincrement())
  name             String
  quantity         String
  price            Int
  min_bundle       Int
  min_bundle_price Int
  max_bundle       Int
  max_bundle_price Int
  userId           Int
  user             User    @relation(fields: [userId], references: [id])
  orders           Order[]

  @@map(name: "items")
}

model Order {
  id         Int    @id @default(autoincrement())
  receipt    String
  totalPrice Int
  itemAmount Int
  itemId     Int
  item       Item   @relation(fields: [itemId], references: [id])
  fromId     Int
  from       User   @relation("from", fields: [fromId], references: [id])
  toId       Int
  to         User   @relation("to", fields: [toId], references: [id])

  @@map(name: "orders")
  
}
